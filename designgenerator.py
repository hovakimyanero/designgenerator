import streamlit as st
import random
import requests

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π (500 –∏–¥–µ–π)
business_ideas = [
    "–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω —ç–∫–æ-–ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ê—Ä–µ–Ω–¥–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–æ–≤", "–ö—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è –¥–µ—Ç–µ–π",
    "–ö–∞—Ñ–µ —Å —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤", "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
    "–ê–≥—Ä–æ—Ç—É—Ä–∏–∑–º –∏ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "VR-–∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞", "–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤",
    "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–Ω–∏–≥–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏", "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
    "–§–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å AI-—Ç—Ä–µ–Ω–µ—Ä–æ–º", "–°–æ–∑–¥–∞–Ω–∏–µ NFT-–∫–æ–ª–ª–µ–∫—Ü–∏–π", "–ë–∏–æ—Ö–∞–∫–∏–Ω–≥-—Ü–µ–Ω—Ç—Ä—ã",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–ø–ª–∏—Ü—ã",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ", "–°–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–π –æ–¥–µ–∂–¥—ã",
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 480 –∏–¥–µ–π...
] 

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π (500 –Ω–∞–∑–≤–∞–Ω–∏–π)
name_prefixes = ["Neo", "Tech", "Smart", "Vision", "Future", "Next", "Cloud", "AI", "Design", "Creative",
                 "Digital", "Hyper", "Ultra", "Pro", "Mega", "Inno", "Giga", "Cyber", "Quantum", "Nano"]
name_suffixes = ["Lab", "Hub", "Soft", "Studio", "Pro", "AI", "Space", "Works", "Forge", "Base",
                 "Solutions", "Systems", "Apps", "Tech", "Concepts", "Group", "Industries", "Network", "Platform", "Dynamics"]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
def generate_name():
    return f"{random.choice(name_prefixes)} {random.choice(name_suffixes)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
def get_random_color():
    return "#{:06x}".format(random.randint(0, 0xFFFFFF))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
def generate_palette():
    return [get_random_color() for _ in range(5)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ª–∏—Ç—Ä—ã —Å Coolors API (fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
def get_color_palette():
    try:
        response = requests.get("https://www.colr.org/json/colors/random/5")
        data = response.json()
        colors = [f"#{c['hex']}" for c in data["colors"] if c["hex"]]
        return colors if colors else generate_palette()
    except:
        return generate_palette()

# –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤
fonts = ["Roboto", "Montserrat", "Lato", "Open Sans", "Poppins", "Raleway", "Nunito", "Merriweather", 
         "Playfair Display", "Oswald", "Bebas Neue", "Source Sans Pro", "Ubuntu", "Fira Sans", "Caveat"]

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è –¥–∏–∑–∞–π–Ω–∞")

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
st.markdown("""
    <style>
        .stButton>button {
            border: 2px solid #ADD8E6;
            color: #ADD8E6;
            background-color: transparent;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .stButton>button:hover {
            border-color: #87CEEB;
            color: #87CEEB;
        }
        
        .hover-box {
            width: 180px;
            height: 180px;
            border-radius: 18px;
            transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
            box-shadow: 8px 8px 12px rgba(0, 0, 0, 0.15), -8px -8px 12px rgba(255, 255, 255, 0.7);
        }
        
        .hover-box:hover {
            transform: translateY(-20px);
            box-shadow: 8px 8px 12px rgba(0, 0, 0, 0.3), -8px -8px 12px rgba(255, 255, 255, 0.3);
        }
    </style>
""", unsafe_allow_html=True)

# –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ Streamlit
if "idea" not in st.session_state:
    st.session_state.idea = random.choice(business_ideas)
if "name" not in st.session_state:
    st.session_state.name = generate_name()
if "palette" not in st.session_state:
    st.session_state.palette = get_color_palette()
if "fonts" not in st.session_state:
    st.session_state.fonts = random.sample(fonts, 2)  # –í—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def generate_new_idea():
    st.session_state.idea = random.choice(business_ideas)
    st.session_state.name = generate_name()
    st.session_state.palette = get_color_palette()
    st.session_state.fonts = random.sample(fonts, 2)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∏–¥–µ–∏
st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é", on_click=generate_new_idea)

st.subheader("üìå –ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞:")
st.write(st.session_state.idea)

st.subheader("üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:")
st.write(st.session_state.name)

st.subheader("üé® –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞:")
cols = st.columns(len(st.session_state.palette))
for i, color in enumerate(st.session_state.palette):
    cols[i].markdown(f'''
        <div class="hover-box" style="background-color: {color};"></div>
    ''', unsafe_allow_html=True)
    cols[i].write(color)

st.subheader("üî† –®—Ä–∏—Ñ—Ç—ã:")
for font in st.session_state.fonts:
    st.write(f"‚Ä¢ {font}")
    st.markdown(f'<p style="font-family: {font}; font-size: 24px;">–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —ç—Ç–∏–º —à—Ä–∏—Ñ—Ç–æ–º</p>', unsafe_allow_html=True)